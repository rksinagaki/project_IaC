name: Deployment:CD Pipeline with Terraform

on:
  workflow_dispatch:
    inputs:
      job_to_run:
        description: 'Select the job to run'
        required: true
        type: choice
        options:
          - deploy
          - destroy

# 環境変数
env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # ECR/Lambda 設定
  ECR_REPOSITORY: youtube-lambda-scraper-repository
  LAMBDA_DOCKERFILE_PATH: ./Dockerfile.lambda
  IMAGE_TAG: ${{ github.sha }}
  
  # Glue Job 設定
  GLUE_SCRIPT_BUCKET: youtube-glue-job-script-1016
  GLUE_SCRIPT_LOCAL_PATH: ./src/glue/app_glue.py
  GLUE_SCRIPT_S3_PATH: jobs/youtube_processor.py

  # Terraform 設定
  TF_WORKING_DIR: ./terraform
  TF_VERSION: 1.13.4

jobs:
  manual-deploy:
    timeout-minutes: 10
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.job_to_run == 'manual-deploy'
    permissions:
      id-token: write 
      contents: read
    
    steps:
      - name: コードのチェックアウト
        uses: actions/checkout@v4

      # AWS OIDC 認証
      - name: AWS認証情報の構成 (OIDC)
        id: assume-role
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_IAM_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}

      # ECR ログイン
      - name: ECRへログイン
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      # ECRリポジトリの事前作成
      - name: ECRリポジトリの初回作成
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }} 
        run: |
          aws ecr create-repository --repository-name ${{ env.ECR_REPOSITORY }} --region ${{ env.AWS_REGION }} || true

      # Lambda コンテナイメージのビルド
      - name: Dockerイメージのビルドとタグ付け (ECR)
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          docker build -t ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }} -f ${{ env.LAMBDA_DOCKERFILE_PATH }} .
          docker tag ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }} ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:latest

      # Lambda コンテナイメージのプッシュ
      - name: ECRへイメージをプッシュ
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          docker push ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
          docker push ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:latest

      # Terraformのセットアップ
      - name: Terraform のセットアップ
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      # GCPのセットアップ
      - name: GCPサービスアカウントキーのセットアップ
        run: |
          printf '%s' '${{ secrets.BIGQUERY_SA_KEY_JSON }}' > ${{ runner.temp }}/gcp-key.json
          echo "GOOGLE_APPLICATION_CREDENTIALS=${{ runner.temp }}/gcp-key.json" >> $GITHUB_ENV
          
      # Terraform initの実行
      - name: Terraform Init
        run: terraform init -reconfigure
        working-directory: ${{ env.TF_WORKING_DIR }}

      # plan用認証
      - name: AWS認証情報の構成 (OIDC)
        id: assume-role-for-plan
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_IAM_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}
      
      # Terraform Plan
      - name: Terraform Plan
        id: plan
        run: |
          terraform plan \
            -var="youtube_api_key=${{ secrets.YOUTUBE_API_KEY }}" \
            -var='bigquery_sa_key_json=${{ secrets.BIGQUERY_SA_KEY_JSON }}' \
            -var="alert_email_endpoint=${{ secrets.ALERT_EMAIL_ENDPOINT }}" \
            -var="gcp_project_id=${{ secrets.GCP_PROJECT_ID }}" \
            -var="gcp_region=${{ secrets.GCP_REGION }}" \
            -out=tfplan
        working-directory: ${{ env.TF_WORKING_DIR }}

      # Terraform Apply (一括)
      - name: Terraform Apply
        if: github.event_name == 'workflow_dispatch'
        run: terraform apply tfplan
        working-directory: ${{ env.TF_WORKING_DIR }}
        
      # Glue JobスクリプトをS3へのアップロード
      - name: Glue JobスクリプトをS3にアップロード
        run: |
          aws s3 cp ${{ env.GLUE_SCRIPT_LOCAL_PATH }} s3://${{ env.GLUE_SCRIPT_BUCKET }}/${{ env.GLUE_SCRIPT_S3_PATH }} \
            --region ${{ secrets.AWS_REGION }}

  manual-destroy:
    timeout-minutes: 5
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.job_to_run == 'manual-destroy'
    environment: production
    
    permissions:
      id-token: write 
      contents: read
    
    steps:
      # コードのチェックアウト
      - name: コードのチェックアウト
        uses: actions/checkout@v4

      # 認証情報の構成 (Destroy用)
      - name: AWS認証情報の構成 (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_IAM_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}

      # Terraformのセットアップ
      - name: Terraform のセットアップ
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      # GCPのセットアップ
      - name: GCPサービスアカウントキーのセットアップ
        run: |
          printf '%s' '${{ secrets.BIGQUERY_SA_KEY_JSON }}' > ${{ runner.temp }}/gcp-key.json
          echo "GOOGLE_APPLICATION_CREDENTIALS=${{ runner.temp }}/gcp-key.json" >> $GITHUB_ENV
          
      # Terraform initの実行 (S3へ接続)
      - name: Terraform Init
        run: terraform init
        working-directory: ${{ env.TF_WORKING_DIR }}

      # Terraform Destroy
      - name: Terraform Destroy
        run: |
          terraform destroy -auto-approve \
            -var="youtube_api_key=${{ secrets.YOUTUBE_API_KEY }}" \
            -var='bigquery_sa_key_json=${{ secrets.BIGQUERY_SA_KEY_JSON }}' \
            -var="alert_email_endpoint=${{ secrets.ALERT_EMAIL_ENDPOINT }}" \
            -var="gcp_project_id=${{ secrets.GCP_PROJECT_ID }}" \
            -var="gcp_region=${{ secrets.GCP_REGION }}"
        working-directory: ${{ env.TF_WORKING_DIR }}