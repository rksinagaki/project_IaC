{
  "Comment": "A description of my state machine",
  "QueryLanguage": "JSONPath",
  "TimeoutSeconds": 900,
  "StartAt": "Pass",
  "States": {
    "Pass": {
      "Type": "Pass",
      "Parameters": {
        "decoded_payload.$": "$.lambda_output"
      },
      "ResultPath": "$",
      "Next": "RunGlueJobAndWait"
    },
    "RunGlueJobAndWait": {
      "Type": "Task",
      "Resource": "arn:aws:states:::glue:startJobRun.sync",
      "Parameters": {
        "JobName": "youtube-data-processing-job",
        "Arguments": {
          "--artist_name_slug.$": "$.decoded_payload.artist_name_slug",
          "--correlation_id.$": "$.decoded_payload.correlation_id",
          "--s3_input_path_comment.$": "$.decoded_payload.input_keys[2]",
          "--processed_base_path.$": "$.decoded_payload.processed_base_path",
          "--report_base_path.$": "$.decoded_payload.report_base_path",
          "--s3_input_path_channel.$": "$.decoded_payload.input_keys[0]",
          "--s3_input_path_video.$": "$.decoded_payload.input_keys[1]"
        }
      },
      "ResultPath": "$.glue_result",
      "Retry": [
        {
          "ErrorEquals": [
            "States.TaskFailed"
          ],
          "IntervalSeconds": 30,
          "MaxAttempts": 3,
          "BackoffRate": 2
        }
      ],
      "Catch": [
        {
          "ErrorEquals": [
            "Glue.ConcurrentRunsExceededException"
          ],
          "ResultPath": "$.ErrorDetails",
          "Next": "NotifyFailure"
        },
        {
          "ErrorEquals": [
            "Glue.AccessDeniedException"
          ],
          "ResultPath": "$.ErrorDetails",
          "Next": "NotifyFailure"
        },
        {
          "ErrorEquals": [
            "States.ALL"
          ],
          "ResultPath": "$.ErrorDetails",
          "Next": "NotifyFailure"
        }
      ],
      "Next": "StartCrawler",
      "TimeoutSeconds": 300
    },
    "StartCrawler": {
      "Type": "Task",
      "Resource": "arn:aws:states:::aws-sdk:glue:startCrawler",
      "Parameters": {
        "Name": "youtube_processed_data_crawler"
      },
      "Retry": [
        {
          "ErrorEquals": [
            "States.TaskFailed"
          ],
          "IntervalSeconds": 30,
          "MaxAttempts": 3,
          "BackoffRate": 2
        }
      ],
      "Catch": [
        {
          "ErrorEquals": [
            "Glue.ConcurrentRunsExceededException"
          ],
          "ResultPath": "$.ErrorDetails",
          "Next": "NotifyFailure"
        },
        {
          "ErrorEquals": [
            "Glue.AccessDeniedException"
          ],
          "ResultPath": "$.ErrorDetails",
          "Next": "NotifyFailure"
        },
        {
          "ErrorEquals": [
            "States.ALL"
          ],
          "ResultPath": "$.ErrorDetails",
          "Next": "NotifyFailure"
        }
      ],
      "Next": "WaitForCrawler"
    },
    "WaitForCrawler": {
      "Type": "Wait",
      "Seconds": 30,
      "Next": "GetCrawlerStatus"
    },
    "GetCrawlerStatus": {
      "Type": "Task",
      "Resource": "arn:aws:states:::aws-sdk:glue:getCrawler",
      "Parameters": {
        "Name": "youtube_processed_data_crawler"
      },
      "Retry": [
        {
          "ErrorEquals": [
            "States.TaskFailed"
          ],
          "IntervalSeconds": 30,
          "MaxAttempts": 3,
          "BackoffRate": 2
        }
      ],
      "Next": "CheckCrawlerStatus"
    },
    "CheckCrawlerStatus": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.Crawler.State",
          "StringEquals": "READY",
          "Next": "CheckLastCrawlResult"
        }
      ],
      "Default": "WaitForCrawler"
    },
    "CheckLastCrawlResult": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.Crawler.LastCrawl.Status",
          "StringEquals": "SUCCEEDED",
          "Next": "NotifySuccess"
        },
        {
          "Variable": "$.Crawler.LastCrawl.Status",
          "StringEquals": "FAILED",
          "Next": "NotifyFailure"
        }
      ]
    },
    "NotifySuccess": {
      "Type": "Task",
      "Resource": "arn:aws:states:::sns:publish",
      "Parameters": {
        "TopicArn": "arn:aws:sns:ap-northeast-1:879363564916:youtube-etl-alert-topic",
        "Message.$": "States.Format('ETL Pipeline SUCCESS ID: {}', $.decoded_payload.correlation_id)",
        "MessageAttributes": {
          "Status": {
            "DataType": "String",
            "StringValue": "SUCCESS"
          }
        }
      },
      "Next": "Success"
    },
    "NotifyFailure": {
      "Type": "Task",
      "Resource": "arn:aws:states:::sns:publish",
      "Parameters": {
        "TopicArn": "arn:aws:sns:ap-northeast-1:879363564916:youtube-etl-alert-topic",
        "Message.$": "States.Format('ETL Pipeline FAILED for ID: {}. Error: {}', $.decoded_payload.correlation_id, $.ErrorDetails.Cause)",
        "MessageAttributes": {
          "Status": {
            "DataType": "String",
            "StringValue": "FAILED"
          }
        }
      },
      "End": true
    },
    "Success": {
      "Type": "Succeed"
    }
  }
}